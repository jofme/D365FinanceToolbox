<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FTBXPRMSelfServiceRoleRequest</Name>
	<SourceCode>
		<Declaration><![CDATA[
public final class FTBXPRMSelfServiceRoleRequest extends FTBXPRMInterfaceBase
{
    public  FTBXPRMSelfServiceRoleRequests           roleRequest;
    public  FTBXPRMSelfServiceRoleRequestNotes       roleRequestsNote;
    public  FTBXPRMTmpReferences                     tmpRoleReferences;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(FTBXPRMSelfServiceRoleRequestId _requestId = '')
    {
        if (_requestId)
        {
            select firstonly roleRequest
                where roleRequest.RequestId == _requestId
                join roleRequestsNote
                    where roleRequestsNote.RequestId == roleRequest.RequestId;

            FTBXPRMSelfServiceRoleRequestReferences references;

            insert_recordset tmpRoleReferences (ReferenceType, Reference)
                select ReferenceType, Reference from references
                where references.RequestId == roleRequest.RequestId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUserId</Name>
				<Source><![CDATA[
    public FTBXPRMSelfServiceRoleRequest setUserId(UserId _userId)
    {
        roleRequest.UserId = _userId;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRole</Name>
				<Source><![CDATA[
    public FTBXPRMSelfServiceRoleRequest setRole(SysSecurityRoleRecId _roleId)
    {
        roleRequest.SysSecurityRoleRecId = _roleId;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFromDateTime</Name>
				<Source><![CDATA[
    public FTBXPRMSelfServiceRoleRequest setFromDateTime(FromDateTime _validFrom)
    {
        isDirty = true;

        roleRequest.FromDateTime = _validFrom;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setToDateTime</Name>
				<Source><![CDATA[
    public FTBXPRMSelfServiceRoleRequest setToDateTime(ToDateTime _validTo)
    {
        isDirty = true;

        roleRequest.ToDateTime = _validTo;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEligibilityId</Name>
				<Source><![CDATA[
    public FTBXPRMSelfServiceRoleRequest setEligibilityId(FTBXPRMSelfServiceRoleEligibilityId _eligibilityId)
    {
        roleRequest.EligibilityId = _eligibilityId;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setJustification</Name>
				<Source><![CDATA[
    public FTBXPRMSelfServiceRoleRequest setJustification(Notes _justification)
    {
        roleRequestsNote.justification = _justification;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDuration</Name>
				<Source><![CDATA[
    public FTBXPRMSelfServiceRoleRequest setDuration(FTBXPRMSelfServiceDuration _duration)
    {
        roleRequest.Duration = _duration;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addReference</Name>
				<Source><![CDATA[
    public FTBXPRMSelfServiceRoleRequest addReference(
        FTBXPRMSelfServiceRoleRequestReferenceType  _refType,
        FTBXRPMSelfServiceRoleRequestReference      _reference)
    {
        tmpRoleReferences.ReferenceType = _refType;
        tmpRoleReferences.Reference     = _reference;
        tmpRoleReferences.insert();

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reload</Name>
				<Source><![CDATA[
    public void reload()
    {
        super();

        roleRequest.reread();
        roleRequestsNote.reread();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatus</Name>
				<Source><![CDATA[
    public FTBXPRMSelfServiceRoleRequest setStatus(FTBXPRMSelfServiceRoleRequestStatus _status)
    {
        if (roleRequest.RequestStatus != _status)
        {
            roleRequest.RequestStatus = _status;

            this.isDirty = true;
            this.statusChanged = true;
        }

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNumSeq</Name>
				<Source><![CDATA[
    private void setNumSeq()
    {
        NumberSequenceReference numSeqRefRequest = FTBXPrivilegedRoleManagementParameters::numRefFTBXPRMSelfServiceRoleRequestId();
        
        if (numSeqRefRequest && numSeqRefRequest.NumberSequenceId)
        {
            numberSeq = NumberSeq::newGetNum(numSeqRefRequest, true);
            roleRequest.RequestId = numberSeq.num();
        }
        else
        {
            throw error(strfmt("@SYS53912"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitToWorkflow</Name>
				<Source><![CDATA[
    public void submitToWorkflow()
    {
        if (roleRequest.canSubmitToWorkflow()
            && Workflow::findWorkflowConfigToActivateForType(workflowTypeStr(FTBXPRMSelfServiceRoleRequestType),roleRequest.RecId, roleRequest.TableId))
        {
            this.setStatus(FTBXPRMSelfServiceRoleRequestStatus::Submitted)
                .commit();
        }
        else if (!FTBXPrivilegedRoleManagementParameters::find().RoleRequestRequireApprovals)
        {
            this.setStatus(FTBXPRMSelfServiceRoleRequestStatus::Approved)
                .commit();

            this.setStatus(FTBXPRMSelfServiceRoleRequestStatus::Assigned)
                .commit();            
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>expireAssignments</Name>
				<Source><![CDATA[
    public void expireAssignments()
    {
        FTBXPRMRoleAssignments roleAssignments;

        while select roleAssignments
            where roleAssignments.RequestId == roleRequest.RequestId
        {
            new FTBXPRMRoleAssignment(roleAssignments.AssignmentId)
                .removeRoleFromUser()
                .setToDateTime(DateTimeUtil::addSeconds(DateTimeUtil::getSystemDateTime(), -1))
                .commit();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>commitInternal</Name>
				<Source><![CDATA[
    protected void commitInternal()
    {
        if (!roleRequest.RecId)
        {
            this.setNumSeq();

            if (roleRequest.validateWrite())
            {
                roleRequest.insert();
                roleRequestsNote.RequestId  = roleRequest.RequestId;
                roleRequestsNote.insert();

                if (tmpRoleReferences)
                {
                    FTBXPRMSelfServiceRoleRequestReferences references;
                    FTBXPRMSelfServiceRoleRequestId         curRequestId = roleRequest.RequestId;

                    insert_recordset references (RequestId, Reference, ReferenceType)
                            select curRequestId, Reference, ReferenceType from tmpRoleReferences;
                }

                numberSeq.used();

                isDirty         = false;
                statusChanged   = false;

                this.submitToWorkflow();
            }
        }
        else if (isDirty)
        {
            isDirty = false;

            if (roleRequest.validateWrite())
            {
                roleRequest.selectForUpdate(true);
                roleRequest.update();
                roleRequest.selectForUpdate(false);

                if (statusChanged)
                {   
                    statusChanged = false;

                    FTBXPRMSelfServiceRoleRequestState::construct(this, roleRequest.RequestStatus).changeState();
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>