<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FTBXECVIESCheckResult</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Representation of a VIES VAT number validation result
/// </summary>
public final class FTBXECVIESCheckResult
{
    //Key fields
    private System.String    countryRegionId;
    private System.String    vatNum;

    //VAT fields
    private EUSalesListTax  vatCountry;
    private VATNum          vatNumTested;
    

    //Entity name and addressing
    private Name        entityName;
    private Addressing  entityAddressing;

    //Database validity information
    private FTBXECVIESVATNumberStatus   vatNumberStatus;    
    private str                         errorMessage;
    private str                         apiRequestIdentifier;
    private FTBXECVIESAPIMessage        apiRequest;
    private FTBXECVIESAPIMessage        apiResponse;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(
        LogisticsAddressCountryRegionId         _countryRegionId,
        EUSalesListTax                          _vatCountry,
        VATNum                                  _vatNum)
    {
        countryRegionId = _countryRegionId;
        vatCountry      = _vatCountry;
        vatNum          = _vatNum;

        this.initVatNumTested();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static FTBXECVIESCheckResult construct(
        LogisticsAddressCountryRegionId         _countryRegionId,
        EUSalesListTax                          _vatCountry,
        VATNum                                  _vatNum)
    {
        return new FTBXECVIESCheckResult(
            _countryRegionId,
            _vatCountry,
            _vatNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVatNumTested</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the tested VAT number.
    /// If correction is activated, the following adjustments will be applied:
    ///     - The ISO country/region code will be removed from the VAT number.
    ///     - All non-alphanumeric characters will be removed.
    /// </summary>
    private void initVatNumTested()
    {
        if (vatNumTested)
        {
            return;
        }

        vatNumTested = vatNum;

        if (!FTBXECVIESParameters::find().SkipVATNumCorrection)
        {
            //Check if VAT number starts with ISO country/region code
            if (subStr(vatNumTested, 1, strLen(vatCountry)) == vatCountry)
            {
                vatNumTested = strDel(vatNumTested, 1, strLen(vatCountry));
            }

            //Remove all non-alphanumeric characters from VAT number
            vatNumTested = strAlpha(vatNumTested);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setResultValues</Name>
				<Source><![CDATA[
    public void setResultValues(
        Name                        _entityName,
        Addressing                  _entityAddressing,
        FTBXECVIESVATNumberStatus   _vatNumberStatus,
        str                         _errorMessage           = '',
        str                         _apiRequest             = '',
        str                         _apiResponse            = '',
        str                         _apiRequestIdentifier   = '')
    {
        entityName              = _entityName;
        entityAddressing        = _entityAddressing;
        vatNumberStatus         = _vatNumberStatus;
        errorMessage            = _errorMessage;
        apiRequest              = _apiRequest;
        apiResponse             = _apiResponse;
        apiRequestIdentifier    = _apiRequestIdentifier;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vatCountry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the 2-character ISO country code that was used for validation
    /// </summary>
    /// <returns>ISO country code</returns>
    public EUSalesListTax vatCountry()
    {
        return vatCountry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>countryRegionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the country/region id for the tested VAT number
    /// </summary>
    /// <returns>Country/region id</returns>
    public System.String countryRegionId()
    {
        return countryRegionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vatNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the VAT number used by the system
    /// </summary>
    /// <returns>System VAT number</returns>
    public System.String vatNum()
    {
        return vatNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vatNumTested</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the VAT number that was sent to VIES
    /// </summary>
    /// <returns>The tested VAT number</returns>
    public VATNum vatNumTested()
    {
        return vatNumTested;
    }

]]></Source>
			</Method>
			<Method>
				<Name>entityName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the company name from VIES
    /// </summary>
    /// <returns>VIES company name</returns>
    public Name entityName()
    {
        return entityName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>entityAddressing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the company addressing from VIES
    /// </summary>
    /// <returns>VIES company addressing</returns>
    public Addressing entityAddressing()
    {
        return entityAddressing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the error message from VIES
    /// </summary>
    /// <returns>The error message from VIES</returns>
    public str errorMessage()
    {
        return errorMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberStatus</Name>
				<Source><![CDATA[
    public FTBXECVIESVATNumberStatus getNumberStatus()
    {
        return vatNumberStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>apiRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the request sent to VIES API
    /// Only set if SaveAPIMessages has been enabled
    /// </summary>
    /// <returns>API request message</returns>
    public FTBXECVIESAPIMessage apiRequest()
    {
        return apiRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>apiResponse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the response sent from VIES API
    /// Only set if SaveAPIMessages has been enabled
    /// </summary>
    /// <returns>API response message</returns>
    public FTBXECVIESAPIMessage apiResponse()
    {
        return apiResponse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>apiRequestIdentifier</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the request identifier from the VIES API
    /// </summary>
    /// <returns>API request identifier</returns>
    public FTBXECVIESVATNumberCheckAPIRequestIdentifier apiRequestIdentifier()
    {
        return apiRequestIdentifier;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasDebuggingInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Is there troubleshooting information attached to check result?
    /// </summary>
    /// <returns>True if there is troubleshooting information available</returns>
    public boolean hasDebuggingInformation()
    {
        return errorMessage
            || apiRequest
            || apiResponse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHashCode</Name>
				<Source><![CDATA[
    public int getHashCode()
    {
        return countryRegionId.GetHashCode() ^ vatNum.GetHashCode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>Equals</Name>
				<Source><![CDATA[
    public boolean Equals(System.Object _obj)
    {
        FTBXECVIESCheckResult result = _obj;

        return countryRegionId == result.countryRegionId()
            && vatNum  == result.vatNum();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>