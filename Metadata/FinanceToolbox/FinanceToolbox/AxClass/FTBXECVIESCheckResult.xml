<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FTBXECVIESCheckResult</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Representation of a VIES VAT number validation result
/// </summary>
internal final class FTBXECVIESCheckResult
{
    //Key fields
    private System.String    isoCode;
    private System.String    vatNum;

    //VAT fields
    private VATNum      vatNumTested;

    //Entity name and addressing
    private Name        entityName;
    private Addressing  entityAddressing;

    //Database validity information
    private boolean     isvalid;
    private boolean     hasError;
    private str         errorMessage;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(
        LogisticsAddressCountryRegionISOCode    _isoCode,
        VATNum                                  _vatNum)
    {
        isoCode         = _isoCode;
        vatNum          = _vatNum;

        this.initVatNumTested();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static FTBXECVIESCheckResult construct(
        LogisticsAddressCountryRegionISOCode    _isoCode,
        VATNum                                  _vatNum)
    {
        return new FTBXECVIESCheckResult(
            _isoCode,
            _vatNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVatNumTested</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the tested VAT number.
    /// If correction is activated, the following adjustments will be applied:
    ///     - The ISO country/region code will be removed from the VAT number.
    ///     - All non-alphanumeric characters will be removed.
    /// </summary>
    private void initVatNumTested()
    {
        if (vatNumTested)
        {
            return;
        }

        vatNumTested = vatNum;

        if (!FTBXECVIESParameters::find().SkipVATNumCorrection)
        {
            //Check if VAT number starts with ISO country/region code
            if (subStr(vatNumTested, 1, strLen(isoCode)) == isoCode)
            {
                vatNumTested = strDel(vatNumTested, 1, strLen(isoCode));
            }

            //Remove all non-alphanumeric characters from VAT number
            vatNumTested = strAlpha(vatNumTested);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setResultValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the result values from the VIES interface implementation
    /// </summary>
    /// <param name = "_entityName">Company name</param>
    /// <param name = "_entityAddressing">Company address</param>
    /// <param name = "_isValid">Is the VAT number valid</param>
    /// <param name = "_hasError">Did the VIES service return an error</param>
    /// <param name = "_errorMessage">Error message from the VIES service</param>
    public void setResultValues(
        Name        _entityName,
        Addressing  _entityAddressing,
        boolean     _isValid,
        boolean     _hasError,
        str         _errorMessage)
    {
        entityName          = _entityName;
        entityAddressing    = _entityAddressing;
        isvalid             = _isValid;
        hasError            = _hasError;
        errorMessage        = _errorMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isoCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the 2-character ISO country code that was used for validation
    /// </summary>
    /// <returns>ISO country code</returns>
    public System.String isoCode()
    {
        return isoCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vatNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the VAT number used by the system
    /// </summary>
    /// <returns>System VAT number</returns>
    public System.String vatNum()
    {
        return vatNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vatNumTested</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the VAT number that was sent to VIES
    /// </summary>
    /// <returns>The tested VAT number</returns>
    public VATNum vatNumTested()
    {
        return vatNumTested;
    }

]]></Source>
			</Method>
			<Method>
				<Name>entityName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the company name from VIES
    /// </summary>
    /// <returns>VIES company name</returns>
    public Name entityName()
    {
        return entityName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>entityAddressing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the company addressing from VIES
    /// </summary>
    /// <returns>VIES company addressing</returns>
    public Addressing entityAddressing()
    {
        return entityAddressing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Is the VIES vat number valid
    /// </summary>
    /// <returns>True if the number is valid, otherwise false</returns>
    public boolean isValid()
    {
        return isvalid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Did the VIES web service respond with an error?
    /// </summary>
    /// <returns>True if an error was received, otherwise false</returns>
    public boolean hasError()
    {
        return hasError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the error message from VIES
    /// </summary>
    /// <returns>The error message from VIES</returns>
    public str errorMessage()
    {
        return errorMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberStatus</Name>
				<Source><![CDATA[
    public FTBXECVIESVATNumberStatus getNumberStatus()
    {
        FTBXECVIESVATNumberStatus ret;

        if (hasError)
        {
            ret = FTBXECVIESVATNumberStatus::VIESError;
        }
        else
        {
            if (isvalid)
            {
                ret = FTBXECVIESVATNumberStatus::Valid;
            }
            else
            {
                ret = FTBXECVIESVATNumberStatus::Invalid;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHashCode</Name>
				<Source><![CDATA[
    public int getHashCode()
    {
        return isoCode.GetHashCode() ^ vatNum.GetHashCode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>Equals</Name>
				<Source><![CDATA[
    public boolean Equals(System.Object _obj)
    {
        FTBXECVIESCheckResult result = _obj;

        return isoCode == result.isoCode()
            && vatNum  == result.vatNum();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>