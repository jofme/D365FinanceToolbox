<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FTBXECVIESTAXNumValidateService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Service that validate VAT numberes against the European Commision's VIES service
/// </summary>
internal final class FTBXECVIESTAXNumValidateService
{
    FTBXECVIESVATNumberCheckTable   vatNumCheckTable;
    RecordInsertList                resultInsertList;      
    RecordInsertList                resultDetailsInsertList;
    NumberSeq                       numberSeq;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>loadTaxVatNumTable</Name>
				<Source><![CDATA[
    private void loadTaxVatNumTable(
        Query                   _query, 
        FTBXECVIESInterfaceBase _viesInterface,
        int                     _maxNumRecords,
        int                     _numDays)
    {
        TaxVATNumTable              taxVatNumTable;
        TaxCountryRegionParameters  taxCountryRegionParameters;
        
        if (_maxNumRecords > 0)
        {
            _query.topRows(_maxNumRecords - _viesInterface.getResults().elements());
        }

        if (_numDays > 0)
        {
            SysQuery::findOrCreateRange(
                _query.dataSourceTable(tableNum(TaxVATNumTable)),
                fieldNum(TaxVATNumTable, FTBXECVIESVATNumberStatusDate)).value(SysQueryRangeUtil::lessThanUtcDate(-_numDays));
        }

        QueryRun queryRun = new QueryRun(_query);

        while (queryRun.next())
        {
            if (queryRun.changed(tableNum(TaxVATNumTable)))
            {
                taxVatNumTable              = queryRun.get(tableNum(TaxVATNumTable));
                taxCountryRegionParameters  = queryRun.get(tableNum(TaxCountryRegionParameters));

                _viesInterface.addCountryVATNumber(
                    taxCountryRegionParameters.CountryRegionId,
                    taxCountryRegionParameters.SalesTaxCode,
                    taxVatNumTable.VATNum);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadTaxRegTable</Name>
				<Source><![CDATA[
    private void loadTaxRegTable(
        Query                   _query,
        FTBXECVIESInterfaceBase _viesInterface,
        int                     _maxNumRecords,
        int                     _numDays)
    {
        TaxRegistration             taxRegistration;
        TaxCountryRegionParameters  taxCountryRegionParameters;
        
        if (_maxNumRecords > 0)
        {
            _query.topRows(_maxNumRecords - _viesInterface.getResults().elements());
        }

        if (_numDays > 0)
        {
            SysQuery::findOrCreateRange(
                _query.dataSourceTable(tableNum(taxRegistration)),
                fieldNum(taxRegistration, FTBXECVIESVATNumberStatusDate)).value(SysQueryRangeUtil::lessThanUtcDate(-_numDays));
        }

        QueryRun queryRun = new QueryRun(_query);

        while (queryRun.next())
        {
            if (queryRun.changed(tableNum(taxRegistration)))
            {
                taxRegistration             = queryRun.get(tableNum(taxRegistration));
                taxCountryRegionParameters  = queryRun.get(tableNum(TaxCountryRegionParameters));

                _viesInterface.addCountryVATNumber(
                    taxCountryRegionParameters.CountryRegionId,
                    taxCountryRegionParameters.SalesTaxCode,
                    taxRegistration.RegistrationNumber);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxNumTables</Name>
				<Source><![CDATA[
    private void updateTaxNumTables()
    {
        #OCCRETRYCOUNT

        TaxVATNumTable                          taxVATNumTable;
        TaxRegistration                         TaxRegistration;
        FTBXECVIESVATNumberCheckResults         checkResults;
        TaxRegistrationTypeApplicabilityRule    taxRegistrationTypeApplicabilityRule;
        TaxRegistrationLegislationTypes         taxRegistrationLegislationTypes;

        try
        {
            ttsbegin;

            update_recordset taxVatNumTable
                setting FTBXECVIESVatNumberCheckId      = checkResults.CheckId,
                        FTBXECVIESVATNumberStatusDate   = checkResults.StatusDate,
                        FTBXECVIESVATNumberStatus       = checkResults.Status
                join checkResults
                    where checkResults.CountryRegionId  == taxVatNumTable.CountryRegionId
                    &&    checkResults.VATNumSystem     == taxVatNumTable.VATNum
                    &&   (checkResults.Status           == FTBXECVIESVATNumberStatus::Invalid
                    ||    checkResults.Status           == FTBXECVIESVATNumberStatus::Valid)
                    &&    checkResults.CheckId          == vatNumCheckTable.CheckId;

            taxRegistration.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);

            update_recordset taxRegistration
                setting FTBXECVIESVatNumberCheckId      = checkResults.CheckId,
                        FTBXECVIESVATNumberStatusDate   = checkResults.StatusDate,
                        FTBXECVIESVATNumberStatus       = checkResults.Status
                join checkResults
                    where checkResults.VATNumSystem     == taxRegistration.RegistrationNumber
                    &&    checkResults.CheckId          == vatNumCheckTable.CheckId
                    &&   (checkResults.Status           == FTBXECVIESVATNumberStatus::Invalid
                    ||    checkResults.Status           == FTBXECVIESVATNumberStatus::Valid)
                exists join taxRegistrationTypeApplicabilityRule
                    where taxRegistrationTypeApplicabilityRule.RecId            == taxRegistration.TaxRegistrationTypeApplicabilityRule
                    &&    taxRegistrationTypeApplicabilityRule.CountryRegionId  == checkResults.CountryRegionId
                exists join taxRegistrationLegislationTypes
                    where   taxRegistrationLegislationTypes.TaxRegistrationTypeApplicabilityRule    == taxRegistrationTypeApplicabilityRule.RecId
                    &&      taxRegistrationLegislationTypes.TaxRegistrationTypesList                == TaxRegistrationTypesList::TAXID;

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            // retry on deadlock
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            // try to resolve update conflict
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                    
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch(Exception::DuplicateKeyException)
        {
            // retry in case of an duplicate key conflict
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::DuplicateKeyExceptionNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::DuplicateKeyException;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doValidateTaxNumbers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform validation of VAT numbers based on the query in the contract class
    /// </summary>
    /// <param name = "_contract">Contract class</param>
    public void doValidateTaxNumbers(FTBXECVIESTAXNumValidateContract _contract)
    {      
        FTBXECVIESInterfaceBase viesInterface = FTBXECVIESInterfaceBase::construct();
        
        resultInsertList        = new RecordInsertList(tableNum(FTBXECVIESVATNumberCheckResults));
        resultDetailsInsertList = new RecordInsertList(tableNum(FTBXECVIESVATNumberCheckResultDetails));

        viesInterface.validationResultUpdated       += eventhandler(this.addResult);
        viesInterface.validateLegalEntityVatNumber  = true;
        
        this.loadTaxVatNumTable(
            _contract.getQuery(queryStr(FTBXECVIESVATNumberQuery)),
            viesInterface,
            _contract.parmNumberOfRecords(),
            _contract.parmNumberOfDays());

        this.loadTaxRegTable(
            _contract.getQuery(queryStr(FTBXECVIESTaxRegNumQuery)),
            viesInterface,
            _contract.parmNumberOfRecords(),
            _contract.parmNumberOfDays());

        try
        {
            ttsbegin;

            if (viesInterface.getResults().elements() > 0)
            {   
                //Check if all counties are available
                viesInterface.updateAvailableCountries();

                this.initHeader();
                viesInterface.invokeValidation();

                resultInsertList.insertDatabase();
                resultDetailsInsertList.insertDatabase();
            
                vatNumCheckTable.insert();
                numberSeq.used();

                this.updateTaxNumTables();
            }
            else
            {
                info("@FinanceToolbox:ECVIESVATNumberNoNumbersFound");
            }

            ttscommit;
        }
        catch
        {
            exceptionTextFallThrough();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNumSeq</Name>
				<Source><![CDATA[
    private void setNumSeq()
    {
        NumberSequenceReference numSeqRefRequest = FTBXECVIESParameters::numRefFTBXECVIESVatNumberCheckId(); 
        
        if (numSeqRefRequest && numSeqRefRequest.NumberSequenceId)
        {
            numberSeq = NumberSeq::newGetNum(numSeqRefRequest, true);
            vatNumCheckTable.CheckId = numberSeq.num();
        }
        else
        {
            throw error("@SYS53912");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initHeader</Name>
				<Source><![CDATA[
    private void initHeader()
    {
        this.setNumSeq();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addResult</Name>
				<Source><![CDATA[
    private void addResult(FTBXECVIESCheckResult _result)
    {
        FTBXECVIESVATNumberCheckResults vatNumCheckResult;
        
        vatNumCheckResult.initFromVatNumCheckTable(vatNumCheckTable);
        vatNumCheckResult.initFromCheckResult(_result);

        vatNumCheckTable.CountTotal++;

        switch (vatNumCheckResult.Status)
        {
            case FTBXECVIESVATNumberStatus::Invalid:
                vatNumCheckTable.CountInvalid++;
                break;
            case FTBXECVIESVATNumberStatus::Valid:
                vatNumCheckTable.CountValid++;
                break;
            case FTBXECVIESVATNumberStatus::VIESError:
                vatNumCheckTable.CountError ++;
        }

        resultInsertList.add(vatNumCheckResult);

        if (_result.hasDebuggingInformation())
        {
            FTBXECVIESVATNumberCheckResultDetails vatNumCheckResultDetails;

            vatNumCheckResultDetails.initFromVatNumCheckTable(vatNumCheckTable);
            vatNumCheckResultDetails.initFromCheckResult(_result);

            resultDetailsInsertList.add(vatNumCheckResultDetails);

        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>