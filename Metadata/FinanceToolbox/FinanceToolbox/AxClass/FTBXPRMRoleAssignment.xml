<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FTBXPRMRoleAssignment</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Entity logic of PRM role assignments
/// This class contains logic that adds and removes security roles from users
/// </summary>
public final class FTBXPRMRoleAssignment extends FTBXPRMInterfaceBase
{
    private FTBXPRMRoleAssignments roleAssignment;
    boolean userRoleChanged;
    boolean dateChanged;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(FTBXPRMRoleAssignmentId _assignmentId = '')
    {
        if (_assignmentId)
        {
            select firstonly roleAssignment
                where roleAssignment.AssignmentId == _assignmentId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static FTBXPRMRoleAssignment construct(FTBXPRMRoleAssignmentId _assignmentId = '')
    {
        return new FTBXPRMRoleAssignment(_assignmentId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRequestId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the request ID of assignment
    /// </summary>
    /// <param name = "_requestId">Request ID</param>
    /// <returns>This</returns>
    public FTBXPRMRoleAssignment setRequestId(FTBXPRMSelfServiceRoleRequestId _requestId)
    {
        roleAssignment.RequestId = _requestId;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFromDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the request from date time of assignment
    /// </summary>
    /// <param name = "_fromDateTime">From date time</param>
    /// <returns>This</returns>
    public FTBXPRMRoleAssignment setFromDateTime(FromDateTime _fromDateTime)
    {
        dateChanged = dateChanged || roleAssignment.RecId;
        isDirty     = isDirty || dateChanged;

        roleAssignment.FromDateTime = _fromDateTime;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setToDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the to date time of assignment
    /// </summary>
    /// <param name = "_toDateTime">To date time</param>
    /// <returns>This</returns>
    public FTBXPRMRoleAssignment setToDateTime(ToDateTime _toDateTime)
    {
        dateChanged = dateChanged || roleAssignment.RecId;
        isDirty     = isDirty || dateChanged;

        roleAssignment.ToDateTime = _toDateTime;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDuration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the duration of assignment in hours
    /// </summary>
    /// <param name = "_duration">Duration in hours</param>
    /// <returns>This</returns>
    public FTBXPRMRoleAssignment setDuration(FTBXPRMSelfServiceDuration _duration)
    {
        roleAssignment.Duration = _duration;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUserId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the user of assignment
    /// </summary>
    /// <param name = "_userId">User Id</param>
    /// <returns>This</returns>
    public FTBXPRMRoleAssignment setUserId(UserId _userId)
    {
        roleAssignment.UserId = _userId;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRole</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the role that should be assigned to user
    /// </summary>
    /// <param name = "_sysSecurityRoleId">Securiy role id</param>
    /// <returns>This</returns>
    public FTBXPRMRoleAssignment setRole(SysSecurityRoleRecId _sysSecurityRoleId)
    {
        userRoleChanged = userRoleChanged || roleAssignment.RecId;
        isDirty         = isDirty || userRoleChanged;

        roleAssignment.SysSecurityRoleRecId = _sysSecurityRoleId;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUserRole</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the reference to the related user role assignment
    /// </summary>
    /// <param name = "_userRoleId">User role reference</param>
    /// <returns>This</returns>
    public FTBXPRMRoleAssignment setUserRole(RefRecId _userRoleId)
    {
        userRoleChanged = userRoleChanged || roleAssignment.RecId;
        isDirty         = isDirty || userRoleChanged;

        roleAssignment.SecurityUserRoleRecId= _userRoleId;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAssignmentDateActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the assignment is active
    /// </summary>
    /// <returns>True if the assignment is active</returns>
    public boolean checkAssignmentDateActive()
    {
        boolean ret;

        ret = roleAssignment.FromDateTime <= DateTimeUtil::getSystemDateTime()
           && roleAssignment.ToDateTime >=  DateTimeUtil::getSystemDateTime();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRoleToUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds security role to user
    /// </summary>
    /// <param name = "_throwOnError">Throws an exception if the assigned role is not active</param>
    /// <returns>This</returns>
    public FTBXPRMRoleAssignment addRoleToUser(boolean _throwOnError = true)
    {
        SecurityUserRole securityUserRole;

        if (this.checkAssignmentDateActive())
        {
            select firstonly securityUserRole
                where securityUserRole.User             == roleAssignment.UserId
                &&    securityUserRole.SecurityRole     == roleAssignment.SysSecurityRoleRecId;

            if (securityUserRole)
            {
                if (securityUserRole.AssignmentStatus == RoleAssignmentStatus::Disabled)
                {
                    securityUserRole.AssignmentStatus = RoleAssignmentStatus::Enabled;

                    securityUserRole.selectForUpdate(true);
                    securityUserRole.update();
                    securityUserRole.selectForUpdate(false);
                }
            }
            else
            {
                securityUserRole.User = roleAssignment.UserId;
                securityUserRole.SecurityRole = roleAssignment.SysSecurityRoleRecId;
                securityUserRole.insert();
            }

            roleAssignment.SecurityUserRoleRecId = securityUserRole.recId;

            if (roleAssignment.SecurityUserRoleRecId != roleAssignment.orig().SecurityUserRoleRecId)
            {
                isDirty         = true;
                userRoleChanged = true;
            }
        }

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeRoleFromUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes role from user
    /// </summary>
    /// <returns>This</returns>
    public FTBXPRMRoleAssignment removeRoleFromUser()
    {
        SecurityUserRole securityUserRole;

        delete_from securityUserRole
            where securityUserRole.RecID == roleAssignment.SecurityUserRoleRecId;

        roleAssignment.SecurityUserRoleRecId = 0;
        isDirty         = true;
        userRoleChanged = true;

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNumSeq</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the ID number of the assignment, based on number sequence 
    /// </summary>
    private void setNumSeq()
    {
        NumberSequenceReference numSeqRefAssignment = FTBXPrivilegedRoleManagementParameters::numRefFTBXPRMRoleAssignmentId();
        
        if (numSeqRefAssignment && numSeqRefAssignment.NumberSequenceId)
        {
            numberSeq = NumberSeq::newGetNum(numSeqRefAssignment, true);
            roleAssignment.AssignmentId = numberSeq.num();
        }
        else
        {
            throw error("@SYS53912");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Corrects for any unexpected date/time values
    /// The flag "dateChanged" will be set to true if it happens. Then a write back to the original request will happen
    /// </summary>
    private void fixDates()
    {
        //This must only be called before a role get's created
        if (!roleAssignment.SecurityUserRoleRecId)
        {
            //If called with an older from date, update the from date to the current system date
            if (roleAssignment.FromDateTime <= DateTimeUtil::getSystemDateTime())
            {
                roleAssignment.FromDateTime = DateTimeUtil::getSystemDateTime();
                dateChanged = true;
            }

            if (roleAssignment.Duration && !roleAssignment.ToDateTime)
            {
                roleAssignment.ToDateTime = DateTimeUtil::addMinutes(roleAssignment.FromDateTime, real2int(roleAssignment.Duration) * 60);
                dateChanged = true;
            }
            else if (roleAssignment.ToDateTime == DateTimeUtil::minValue())
            {
                roleAssignment.ToDateTime = DateTimeUtil::maxValue();
                dateChanged = true;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFixOverlap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Corrects any overlapping assignmenst
    /// </summary>
    private void checkFixOverlap()
    {
        FTBXPRMRoleAssignments roleAssignmentSearch;

        while select AssignmentId from roleAssignmentSearch
            where roleAssignmentSearch.SysSecurityRoleRecId     == roleAssignment.SysSecurityRoleRecId
            &&    roleAssignmentSearch.UserId                   == roleAssignment.UserId
            &&    roleAssignmentSearch.SecurityUserRoleRecId    != 0
            &&    roleAssignmentSearch.ToDateTime               >= roleAssignment.FromDateTime
        {
            new FTBXPRMRoleAssignment(roleAssignmentSearch.AssignmentId)
                .setToDateTime(DateTimeUtil::addSeconds(roleAssignment.FromDateTime, -1))
                .setUserRole(0)
                .commit();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>commitInternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains logic that commits assignment
    /// </summary>
    protected void commitInternal()
    {
        if (!roleAssignment.RecId)
        {
            this.fixDates();
            this.setNumSeq();            

            if (roleAssignment.validateWrite())
            {   
                if (roleAssignment.RequestId && roleAssignment.ToDateTime <= DateTimeUtil::getSystemDateTime())
                {
                    FTBXPRMSelfServiceRoleRequest::construct(roleAssignment.RequestId)
                        .setStatus(FTBXPRMSelfServiceRoleRequestStatus::Expired)
                        .commit();
                }
                else
                {
                    roleAssignment.insert();
                 
                    this.checkFixOverlap();
                    numberSeq.used();

                    if (roleAssignment.RequestId && dateChanged)
                    {
                        FTBXPRMSelfServiceRoleRequest::construct(roleAssignment.RequestId)
                            .setFromDateTime(roleAssignment.FromDateTime)
                            .setToDateTime(roleAssignment.ToDateTime)
                            .commit();
                    }
                }
            }
        }
        else if (isDirty)
        {
            roleAssignment.selectForUpdate(true);
            roleAssignment.update();
            roleAssignment.selectForUpdate(false);

            if (roleAssignment.RequestId)
            {
                var request = FTBXPRMSelfServiceRoleRequest::construct(roleAssignment.RequestId);

                if (dateChanged)
                {
                    request
                        .setFromDateTime(roleAssignment.FromDateTime)
                        .setToDateTime(roleAssignment.ToDateTime);
                }
            
                if (userRoleChanged)
                {
                    if (roleAssignment.ToDateTime <= DateTimeUtil::getSystemDateTime())
                    {
                        request
                            .setStatus(FTBXPRMSelfServiceRoleRequestStatus::Expired)
                            .commit();
                    }
                    else
                    {
                        request
                            .setStatus(FTBXPRMSelfServiceRoleRequestStatus::Assigned)
                            .commit();
                    }
                }

                request.commit();
            }
        }

        isDirty = false;
        userRoleChanged = false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>