<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FTBXPRMTmpSelectedRoles</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class FTBXPRMTmpSelectedRoles extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromSet</Name>
				<Source><![CDATA[
    public void initFromSet(Set _eligibleRoleSet)
    {
        SetEnumerator enumerator = _eligibleRoleSet.getEnumerator();

        while (enumerator.moveNext())
        {
            FTBXPRMSelfServiceUserEligibleRole eligibleRole = enumerator.current();

            if (eligibleRole.roleEligibilityId)
            {
                this.clear();
                this.initFromEligibleRole(eligibleRole);
                this.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromEligibleRole</Name>
				<Source><![CDATA[
    public void initFromEligibleRole(FTBXPRMSelfServiceUserEligibleRole _eligibleRole)
    {
        this.SysSecurityRoleRecId   = _eligibleRole.roleId;
        this.ToDateTime             = _eligibleRole.toDateTime;
        this.MaxDuration            = _eligibleRole.maxDuration;
        this.FromDateTime           = _eligibleRole.fromDateTime;
        this.EarliestStartDateTime  = _eligibleRole.fromDateTime;
        this.EligibilityId          = _eligibleRole.roleEligibilityId;

        this.updateDuration();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDuration</Name>
				<Source><![CDATA[
    public void updateDuration()
    {
        if (this.FromDateTime && this.ToDateTime)
        {
            this.Duration = DateTimeUtil::getDifference(this.ToDateTime, this.FromDateTime) / 3600;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateToDate</Name>
				<Source><![CDATA[
    private void updateToDate()
    {
        if (!this.FromDateTime && this.ToDateTime)
        {
            if (this.MaxDuration)
            {
                this.FromDateTime = DateTimeUtil::addHours(this.ToDateTime, -this.MaxDuration);
            }
            else
            {
                this.FromDateTime = this.EarliestStartDateTime;
            }
        }
        else if (this.MaxDuration)
        {
            int64 difference = DateTimeUtil::getDifference(this.FromDateTime, this.ToDateTime);

            if (difference >= any2Int(this.MaxDuration) * 3600)
            {
                int64 differenceOrig = DateTimeUtil::getDifference(this.FromDateTime, this.orig().FromDateTime);

                if (differenceOrig)
                {
                    this.ToDateTime = max(DateTimeUtil::addSeconds(this.orig().ToDateTime, difference), this.EarliestStartDateTime);
                }
            }
        }

        this.updateDuration();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromDate</Name>
				<Source><![CDATA[
    private void updateFromDate()
    {
        if (!this.toDateTime && this.FromDateTime)
        {
            if (this.MaxDuration)
            {
                this.ToDateTime = DateTimeUtil::addHours(this.FromDateTime, this.MaxDuration);
            }
            else
            {
                this.ToDateTime = DateTimeUtil::minValue();
            }
        }
        else if (this.MaxDuration)
        {
            int64 difference = DateTimeUtil::getDifference(this.ToDateTime, this.FromDateTime);

            if (difference >= any2Int(this.MaxDuration) * 3600)
            {
                int64 differenceOrig = DateTimeUtil::getDifference(this.ToDateTime, this.orig().ToDateTime);

                if (differenceOrig)
                {
                    this.FromDateTime = max(DateTimeUtil::addSeconds(this.FromDateTime, differenceOrig), this.EarliestStartDateTime);
                }
            }
        }

        this.updateDuration();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(int _fieldId)
    {   
        super(_fieldId);

        switch(_fieldId)
        {
            case fieldNum(FTBXPRMTmpSelectedRoles, FromDateTime):
                this.updateToDate();
                break;
            case fieldNum(FTBXPRMTmpSelectedRoles, ToDateTime):
                this.updateFromDate();
                break;
            case fieldNum(FTBXPRMTmpSelectedRoles, Duration):
                if (this.Duration)
                {
                    if (this.FromDateTime)
                    {
                        if (this.MaxDuration)
                        {
                            this.ToDateTime = DateTimeUtil::addMinutes(this.FromDateTime, min(this.MaxDuration * 60, this.Duration * 60));
                        }
                        else
                        {
                            this.ToDateTime = DateTimeUtil::addMinutes(this.FromDateTime, this.Duration * 60);
                        }                        
                    }
                }                
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldId)
    {
        boolean ret = super(_fieldId);

        if (ret)
        {
            switch(_fieldId)
            {
                case fieldNum(FTBXPRMTmpSelectedRoles, FromDateTime):
                case fieldNum(FTBXPRMTmpSelectedRoles, ToDateTime):
                    if (this.FromDateTime < this.EarliestStartDateTime)
                    {
                        ret = checkFailed(strFmt("@FinanceToolbox:SelfServiceTmpSelectedRoleDateTimeCannotBeBefore", this.EarliestStartDateTime));
                    }
                    else if (this.ToDateTime && this.ToDateTime <= this.FromDateTime)
                    {
                        ret = checkFailed("@FinanceToolbox:SelfServiceTmpSelectedRoleToDateBeforeFromDate");
                    }
                    else if (this.MaxDuration
                        && this.FromDateTime 
                        && this.ToDateTime
                        && DateTimeUtil::getDifference(this.ToDateTime, this.FromDateTime) / 3600 > this.MaxDuration)
                    {
                        ret = checkFailed("@FinanceToolbox:SelfServiceTmpSelectedRoleMaxDuration");
                    }
                    break;
                case fieldNum(FTBXPRMTmpSelectedRoles, Duration):
                    if (this.MaxDuration && this.Duration > this.MaxDuration)
                    {
                        ret = checkFailed("@FinanceToolbox:SelfServiceTmpSelectedRoleDurationGreaterThanMaxDuration");
                    }
                    else if (this.Duration < 0)
                    {
                        ret = checkFailed("@FinanceToolbox:SelfServiceTmpSelectedRoleDurationNegative");
                    }
                    break;                    
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<Label>@FinanceToolbox:SelfServiceTmpSelectedRoleLabel</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TitleField1>EligibilityId</TitleField1>
	<TitleField2>SysSecurityRoleRecId</TitleField2>
	<ClusteredIndex>EligibilityIdx</ClusteredIndex>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<TableType>TempDB</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EligibilityId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>FTBXPRMSelfServiceRoleEligibilityId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>FromDateTime</Name>
			<ExtendedDataType>FromDateTime</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ToDateTime</Name>
			<ExtendedDataType>ToDateTime</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SysSecurityRoleRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>SysSecurityRoleRecId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Duration</Name>
			<ExtendedDataType>FTBXPRMSelfServiceDuration</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MaxDuration</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>FTBXPRMSelfServiceMaxDuration</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>EarliestStartDateTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>FromDateTime</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>EligibilityIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>EligibilityId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SecurityRole</Name>
			<Cardinality>ZeroMore</Cardinality>
			<CreateNavigationPropertyMethods>Yes</CreateNavigationPropertyMethods>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>SecurityRole</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SysSecurityRoleRecId</Name>
					<Field>SysSecurityRoleRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>